{"ast":null,"code":"const includesOperator = text => {\n  const operators = ['+', '-', '*', '/', '='];\n  const arrayValues = text.split(' ');\n  console.log(arrayValues); // https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/String/includes\n\n  if (arrayValues && operators.includes(arrayValues[arrayValues.length - 1])) {\n    return true;\n  }\n\n  return false;\n}; // https://metring.com.br/arredondar-numero-em-javascript\n\n\nconst round = (num, places) => {\n  if (!(\"\" + num).includes(\"e\")) {\n    return +(Math.round(num + \"e+\" + places) + \"e-\" + places);\n  } else {\n    let arr = (\"\" + num).split(\"e\");\n    let sig = \"\";\n\n    if (+arr[1] + places > 0) {\n      sig = \"+\";\n    }\n\n    return +(Math.round(+arr[0] + \"e\" + sig + (+arr[1] + places)) + \"e-\" + places);\n  }\n};\n\nexport const operationEquals = value => {\n  // https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/String/includes\n  if (value.includes(\"+\")) {\n    const array = value.split(\"+\");\n    let result = 0;\n    array.forEach(item => {\n      result += parseFloat(item);\n    });\n    return round(result, 4).toString();\n  }\n\n  if (value.includes(\"-\")) {\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse\n    const array = value.split(\"-\");\n    let result = array[0];\n    array.splice(array.indexOf(array[0]), 1);\n    array.forEach(item => {\n      result = result - parseFloat(item);\n    });\n    return round(result, 4).toString();\n  }\n\n  if (value.includes(\"*\")) {\n    const array = value.split(\"*\");\n    let result = 1;\n    array.forEach(item => {\n      result *= parseFloat(item);\n    });\n    return round(result, 4).toString();\n  }\n\n  if (value.includes(\"/\")) {\n    const array = value.split(\"/\");\n    const result = parseFloat(array[0]) / parseFloat(array[1]);\n    return round(result, 4).toString();\n  }\n\n  return value;\n};\nexport { includesOperator };","map":{"version":3,"sources":["/home/duda/AcademiaAccenture/accenture-academy-front/calculator/src/helper/funcHelp.js"],"names":["includesOperator","text","operators","arrayValues","split","console","log","includes","length","round","num","places","Math","arr","sig","operationEquals","value","array","result","forEach","item","parseFloat","toString","splice","indexOf"],"mappings":"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","sourcesContent":["const includesOperator = (text) => {\n  const operators = ['+', '-', '*', '/', '='];\n  const arrayValues = text.split(' ');\n\n  console.log(arrayValues);\n  // https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/String/includes\n  if(arrayValues && operators.includes(arrayValues[arrayValues.length -1])) {\n    return true;\n  }\n\n  return false;\n}\n\n// https://metring.com.br/arredondar-numero-em-javascript\nconst round = (num, places) => {\n\tif (!(\"\" + num).includes(\"e\")) {\n\t\treturn +(Math.round(num + \"e+\" + places)  + \"e-\" + places);\n\t} else {\n\t\tlet arr = (\"\" + num).split(\"e\");\n\t\tlet sig = \"\"\n\t\tif (+arr[1] + places > 0) {\n\t\t\tsig = \"+\";\n\t\t}\n\n\t\treturn +(Math.round(+arr[0] + \"e\" + sig + (+arr[1] + places)) + \"e-\" + places);\n\t}\n}\n\nexport const operationEquals = (value) => {\n    // https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/String/includes\n    if(value.includes(\"+\")){\n      const array = value.split(\"+\");\n      let result = 0;\n      \n      array.forEach((item) => {\n        result += parseFloat(item);\n      })\n      \n      return round(result, 4).toString();\n    }\n\n    if(value.includes(\"-\")){\n      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse\n      const array = value.split(\"-\");\n      let result = array[0];\n      array.splice(array.indexOf(array[0]), 1);\n      \n      array.forEach((item) => {\n        result = result - parseFloat(item);\n      })\n\n      return round(result, 4).toString()\n    }\n\n    if(value.includes(\"*\")){\n      const array = value.split(\"*\");\n      let result = 1;\n      \n      array.forEach((item) => {\n        result *= parseFloat(item);\n      })\n\n      return round(result, 4).toString()\n    }\n\n    if(value.includes(\"/\")){\n      const array = value.split(\"/\");\n      const result = parseFloat(array[0]) / parseFloat(array[1]);\n\n      return round(result, 4).toString()\n    }\n\n    return value;\n  }\n\n  export { includesOperator }"]},"metadata":{},"sourceType":"module"}