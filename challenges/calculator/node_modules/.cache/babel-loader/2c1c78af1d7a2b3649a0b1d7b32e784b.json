{"ast":null,"code":"var _jsxFileName = \"/home/duda/AcademiaAccenture/accenture-academy-front/calculator/src/components/Calculator.jsx\";\nimport React, { Component } from 'react';\nimport { includesOperator, operationEquals } from '../helper/funcHelp';\nimport ButtonOperator from './ButtonOperatorn';\nimport '../css/calculator.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Calculator extends Component {\n  constructor(props) {\n    super(props);\n\n    this.changeValue = item => {\n      this.setState(prevState => ({\n        value: prevState.value === '0' ? item : includesOperator(prevState.value) ? prevState.value + ' ' + item : prevState.value + item\n      }));\n    };\n\n    this.operationNumber = operation => {\n      if (operation !== '=') {\n        // com condição para não colocar além de uma divisão, não repetir operador depois de operador \n        // e não implementar mais de uma operação\n        this.setState(prevState => ({\n          value: prevState.value.split(\"/\").length > 1 || ![operation, ''].includes(prevState.operation) || includesOperator(prevState.value) ? prevState.value : prevState.value + ' ' + operation,\n          operation: ![operation, ''].includes(prevState.operation) ? prevState.operation : operation\n        }));\n      } else {\n        const {\n          value\n        } = this.state;\n        this.setState({\n          value: operationEquals(value),\n          operation: ''\n        });\n      }\n    };\n\n    this.reset = () => {\n      this.setState({\n        value: '0'\n      });\n    };\n\n    this.state = {\n      value: '0',\n      operation: ''\n    };\n  }\n\n  render() {\n    const numbers = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'];\n    const {\n      value\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"App-logo\",\n          alt: \"logo Accenture\",\n          src: \"./logo.svg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          id: \"title\",\n          children: \"Accenture Calculator\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          id: \"value\",\n          children: value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"allbuttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"numbers\",\n            children: numbers.map((item, idx) => /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => this.changeValue(item),\n              children: item\n            }, idx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ButtonOperator, {\n            funcOperator: this.operationNumber,\n            funcReset: this.reset\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Calculator;","map":{"version":3,"sources":["/home/duda/AcademiaAccenture/accenture-academy-front/calculator/src/components/Calculator.jsx"],"names":["React","Component","includesOperator","operationEquals","ButtonOperator","Calculator","constructor","props","changeValue","item","setState","prevState","value","operationNumber","operation","split","length","includes","state","reset","render","numbers","map","idx"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { includesOperator, operationEquals } from '../helper/funcHelp';\nimport ButtonOperator from './ButtonOperatorn';\nimport '../css/calculator.css'\n\nclass Calculator extends Component {\n  constructor(props){\n    super(props);\n    this.state= {\n      value: '0', \n      operation: ''\n    }\n  }\n\n  changeValue = (item) => {\n    this.setState((prevState) => ({\n      value: prevState.value === '0' ? item : (includesOperator(prevState.value) ? prevState.value + ' ' + item : prevState.value + item)\n    }))\n  }\n\n  operationNumber = (operation) => {\n    if(operation !== '=') {\n      // com condição para não colocar além de uma divisão, não repetir operador depois de operador \n      // e não implementar mais de uma operação\n      this.setState((prevState) => ({\n        value: prevState.value.split(\"/\").length > 1 || ![operation, ''].includes(prevState.operation) || includesOperator(prevState.value)  ? \n        prevState.value : prevState.value + ' ' + operation,\n        operation: ![operation, ''].includes(prevState.operation) ? prevState.operation : operation \n      }));\n    }\n\n    else {\n      const { value } = this.state;\n\n      this.setState({\n        value: operationEquals(value),\n        operation: ''\n      });\n    }\n  }\n\n  reset = () => {\n    this.setState(({\n      value: '0'\n    }))\n  }\n\n\n  render() {\n    const numbers = ['1','2','3','4','5','6','7','8','9', '0'];\n    const { value } = this.state;\n\n    return (\n      <div className=\"main\">\n        <div className=\"App\">\n          <img className=\"App-logo\" alt=\"logo Accenture\" src=\"./logo.svg\"/>\n        </div>\n       \n\n        <div className=\"container\">\n          <p id=\"title\">Accenture Calculator</p> \n       \n          <hr/>\n\n          <p id=\"value\">{value}</p>\n\n          <div className=\"allbuttons\">\n              <div className=\"numbers\">\n                {numbers.map((item, idx) =>\n                  <button\n                    key={idx}\n                    onClick={() => this.changeValue(item)}\n                  >\n                    {item}\n                  </button>\n                )}\n              </div>\n              \n              <ButtonOperator funcOperator={this.operationNumber} funcReset={this.reset}/>\n            </div>\n          </div>\n      </div>\n    );\n  }\n}\nexport default Calculator;\n"]},"metadata":{},"sourceType":"module"}