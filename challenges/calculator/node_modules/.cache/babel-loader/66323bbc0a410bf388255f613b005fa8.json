{"ast":null,"code":"var _jsxFileName = \"/home/duda/AcademiaAccenture/accenture-academy-front/calculator/src/components/Calculator.jsx\";\nimport React, { Component } from 'react';\nimport { includesOperator, operationEquals } from '../helper/funcHelp';\nimport ButtonOperator from './ButtonOperatorn';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Calculator extends Component {\n  constructor(props) {\n    super(props);\n\n    this.changeValue = item => {\n      this.setState(prevState => ({\n        value: includesOperator(prevState.value) ? prevState.value + ' ' + item : item\n      }));\n    };\n\n    this.operationNumber = operation => {\n      if (operation !== '=') {\n        // com condição para não colocar além de uma divisão, não repetir operador depois de operador \n        // e não implementar mais de uma operação\n        this.setState(prevState => ({\n          value: prevState.value.split(\"/\").length > 1 || ![operation, ''].includes(prevState.operation) || includesOperator(prevState.value) ? prevState.value : prevState.value + ' ' + operation,\n          operation: ![operation, ''].includes(prevState.operation) ? prevState.operation : operation\n        }));\n      } else {\n        const {\n          value\n        } = this.state;\n        this.setState({\n          value: operationEquals(value),\n          operation: ''\n        });\n      }\n    };\n\n    this.reset = () => {\n      this.setState({\n        value: '0'\n      });\n    };\n\n    this.state = {\n      value: '0',\n      operation: ''\n    };\n  }\n\n  render() {\n    const numbers = ['1', '2', '3', '4', '5', '6', '7', '8', '9'];\n    const {\n      value\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), numbers.map((item, idx) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.changeValue(item),\n        children: item\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(ButtonOperator, {\n        funcOperator: this.operationNumber,\n        funcReset: this.reset\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Calculator;","map":{"version":3,"sources":["/home/duda/AcademiaAccenture/accenture-academy-front/calculator/src/components/Calculator.jsx"],"names":["React","Component","includesOperator","operationEquals","ButtonOperator","Calculator","constructor","props","changeValue","item","setState","prevState","value","operationNumber","operation","split","length","includes","state","reset","render","numbers","map","idx"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,gBAAT,EAA2BC,eAA3B,QAAkD,oBAAlD;AACA,OAAOC,cAAP,MAA2B,mBAA3B;;;AAEA,MAAMC,UAAN,SAAyBJ,SAAzB,CAAmC;AACjCK,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;;AADgB,SAQlBC,WARkB,GAQHC,IAAD,IAAU;AACtB,WAAKC,QAAL,CAAeC,SAAD,KAAgB;AAC5BC,QAAAA,KAAK,EAAEV,gBAAgB,CAACS,SAAS,CAACC,KAAX,CAAhB,GAAoCD,SAAS,CAACC,KAAV,GAAkB,GAAlB,GAAwBH,IAA5D,GAAmEA;AAD9C,OAAhB,CAAd;AAGD,KAZiB;;AAAA,SAclBI,eAdkB,GAcCC,SAAD,IAAe;AAC/B,UAAGA,SAAS,KAAK,GAAjB,EAAsB;AACpB;AACA;AACA,aAAKJ,QAAL,CAAeC,SAAD,KAAgB;AAC5BC,UAAAA,KAAK,EAAED,SAAS,CAACC,KAAV,CAAgBG,KAAhB,CAAsB,GAAtB,EAA2BC,MAA3B,GAAoC,CAApC,IAAyC,CAAC,CAACF,SAAD,EAAY,EAAZ,EAAgBG,QAAhB,CAAyBN,SAAS,CAACG,SAAnC,CAA1C,IAA2FZ,gBAAgB,CAACS,SAAS,CAACC,KAAX,CAA3G,GAAgID,SAAS,CAACC,KAA1I,GAAkJD,SAAS,CAACC,KAAV,GAAkB,GAAlB,GAAwBE,SADrJ;AAE5BA,UAAAA,SAAS,EAAE,CAAC,CAACA,SAAD,EAAY,EAAZ,EAAgBG,QAAhB,CAAyBN,SAAS,CAACG,SAAnC,CAAD,GAAiDH,SAAS,CAACG,SAA3D,GAAuEA;AAFtD,SAAhB,CAAd;AAID,OAPD,MASK;AACH,cAAM;AAAEF,UAAAA;AAAF,YAAY,KAAKM,KAAvB;AAEA,aAAKR,QAAL,CAAe;AACbE,UAAAA,KAAK,EAAET,eAAe,CAACS,KAAD,CADT;AAEbE,UAAAA,SAAS,EAAE;AAFE,SAAf;AAID;AACF,KAhCiB;;AAAA,SAkClBK,KAlCkB,GAkCV,MAAM;AACZ,WAAKT,QAAL,CAAe;AACbE,QAAAA,KAAK,EAAE;AADM,OAAf;AAGD,KAtCiB;;AAEhB,SAAKM,KAAL,GAAY;AACVN,MAAAA,KAAK,EAAE,GADG;AAEVE,MAAAA,SAAS,EAAE;AAFD,KAAZ;AAID;;AAmCDM,EAAAA,MAAM,GAAG;AACP,UAAMC,OAAO,GAAG,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,EAAa,GAAb,EAAiB,GAAjB,EAAqB,GAArB,EAAyB,GAAzB,EAA6B,GAA7B,EAAiC,GAAjC,CAAhB;AACA,UAAM;AAAET,MAAAA;AAAF,QAAY,KAAKM,KAAvB;AAEA,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACE;AAAA,kBAAIN;AAAJ;AAAA;AAAA;AAAA;AAAA,cADF,EAGGS,OAAO,CAACC,GAAR,CAAY,CAACb,IAAD,EAAOc,GAAP,kBACX;AAEE,QAAA,OAAO,EAAE,MAAM,KAAKf,WAAL,CAAiBC,IAAjB,CAFjB;AAAA,kBAIGA;AAJH,SACOc,GADP;AAAA;AAAA;AAAA;AAAA,cADD,CAHH,eAYE,QAAC,cAAD;AAAgB,QAAA,YAAY,EAAE,KAAKV,eAAnC;AAAoD,QAAA,SAAS,EAAE,KAAKM;AAApE;AAAA;AAAA;AAAA;AAAA,cAZF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAgBD;;AA9DgC;;AAgEnC,eAAed,UAAf","sourcesContent":["import React, { Component } from 'react';\nimport { includesOperator, operationEquals } from '../helper/funcHelp';\nimport ButtonOperator from './ButtonOperatorn';\n\nclass Calculator extends Component {\n  constructor(props){\n    super(props);\n    this.state= {\n      value: '0', \n      operation: ''\n    }\n  }\n\n  changeValue = (item) => {\n    this.setState((prevState) => ({\n      value: includesOperator(prevState.value) ? prevState.value + ' ' + item : item\n    }))\n  }\n\n  operationNumber = (operation) => {\n    if(operation !== '=') {\n      // com condição para não colocar além de uma divisão, não repetir operador depois de operador \n      // e não implementar mais de uma operação\n      this.setState((prevState) => ({\n        value: prevState.value.split(\"/\").length > 1 || ![operation, ''].includes(prevState.operation) || includesOperator(prevState.value)  ? prevState.value : prevState.value + ' ' + operation,\n        operation: ![operation, ''].includes(prevState.operation) ? prevState.operation : operation \n      }));\n    }\n\n    else {\n      const { value } = this.state;\n\n      this.setState( {\n        value: operationEquals(value),\n        operation: ''\n      });\n    }\n  }\n\n  reset = () => {\n    this.setState(({\n      value: '0'\n    }))\n  }\n\n\n  render() {\n    const numbers = ['1','2','3','4','5','6','7','8','9'];\n    const { value } = this.state;\n\n    return (\n      <div className=\"container\">\n        <p>{value}</p>\n\n        {numbers.map((item, idx) =>\n          <button \n            key={idx}\n            onClick={() => this.changeValue(item)}\n          >\n            {item}\n          </button>\n        )}\n        \n        <ButtonOperator funcOperator={this.operationNumber} funcReset={this.reset}/>\n      </div>\n    );\n  }\n}\nexport default Calculator;\n"]},"metadata":{},"sourceType":"module"}